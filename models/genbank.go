// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Genbank is an object representing the database table.
type Genbank struct {
	Accession  string     `boil:"accession" json:"accession" toml:"accession" yaml:"accession"`
	SeqhashID  string     `boil:"seqhash_id" json:"seqhash_id" toml:"seqhash_id" yaml:"seqhash_id"`
	BinaryJSON types.JSON `boil:"binary_json" json:"binary_json" toml:"binary_json" yaml:"binary_json"`
	JSONHash   string     `boil:"json_hash" json:"json_hash" toml:"json_hash" yaml:"json_hash"`

	R *genbankR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L genbankL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GenbankColumns = struct {
	Accession  string
	SeqhashID  string
	BinaryJSON string
	JSONHash   string
}{
	Accession:  "accession",
	SeqhashID:  "seqhash_id",
	BinaryJSON: "binary_json",
	JSONHash:   "json_hash",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var GenbankWhere = struct {
	Accession  whereHelperstring
	SeqhashID  whereHelperstring
	BinaryJSON whereHelpertypes_JSON
	JSONHash   whereHelperstring
}{
	Accession:  whereHelperstring{field: "\"genbank\".\"accession\""},
	SeqhashID:  whereHelperstring{field: "\"genbank\".\"seqhash_id\""},
	BinaryJSON: whereHelpertypes_JSON{field: "\"genbank\".\"binary_json\""},
	JSONHash:   whereHelperstring{field: "\"genbank\".\"json_hash\""},
}

// GenbankRels is where relationship names are stored.
var GenbankRels = struct {
	Seqhash string
}{
	Seqhash: "Seqhash",
}

// genbankR is where relationships are stored.
type genbankR struct {
	Seqhash *Seqhash `boil:"Seqhash" json:"Seqhash" toml:"Seqhash" yaml:"Seqhash"`
}

// NewStruct creates a new relationship struct
func (*genbankR) NewStruct() *genbankR {
	return &genbankR{}
}

// genbankL is where Load methods for each relationship are stored.
type genbankL struct{}

var (
	genbankAllColumns            = []string{"accession", "seqhash_id", "binary_json", "json_hash"}
	genbankColumnsWithoutDefault = []string{"accession", "seqhash_id", "binary_json", "json_hash"}
	genbankColumnsWithDefault    = []string{}
	genbankPrimaryKeyColumns     = []string{"accession"}
)

type (
	// GenbankSlice is an alias for a slice of pointers to Genbank.
	// This should generally be used opposed to []Genbank.
	GenbankSlice []*Genbank
	// GenbankHook is the signature for custom Genbank hook methods
	GenbankHook func(context.Context, boil.ContextExecutor, *Genbank) error

	genbankQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	genbankType                 = reflect.TypeOf(&Genbank{})
	genbankMapping              = queries.MakeStructMapping(genbankType)
	genbankPrimaryKeyMapping, _ = queries.BindMapping(genbankType, genbankMapping, genbankPrimaryKeyColumns)
	genbankInsertCacheMut       sync.RWMutex
	genbankInsertCache          = make(map[string]insertCache)
	genbankUpdateCacheMut       sync.RWMutex
	genbankUpdateCache          = make(map[string]updateCache)
	genbankUpsertCacheMut       sync.RWMutex
	genbankUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var genbankBeforeInsertHooks []GenbankHook
var genbankBeforeUpdateHooks []GenbankHook
var genbankBeforeDeleteHooks []GenbankHook
var genbankBeforeUpsertHooks []GenbankHook

var genbankAfterInsertHooks []GenbankHook
var genbankAfterSelectHooks []GenbankHook
var genbankAfterUpdateHooks []GenbankHook
var genbankAfterDeleteHooks []GenbankHook
var genbankAfterUpsertHooks []GenbankHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Genbank) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genbankBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Genbank) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genbankBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Genbank) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genbankBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Genbank) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genbankBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Genbank) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genbankAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Genbank) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genbankAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Genbank) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genbankAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Genbank) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genbankAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Genbank) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genbankAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGenbankHook registers your hook function for all future operations.
func AddGenbankHook(hookPoint boil.HookPoint, genbankHook GenbankHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		genbankBeforeInsertHooks = append(genbankBeforeInsertHooks, genbankHook)
	case boil.BeforeUpdateHook:
		genbankBeforeUpdateHooks = append(genbankBeforeUpdateHooks, genbankHook)
	case boil.BeforeDeleteHook:
		genbankBeforeDeleteHooks = append(genbankBeforeDeleteHooks, genbankHook)
	case boil.BeforeUpsertHook:
		genbankBeforeUpsertHooks = append(genbankBeforeUpsertHooks, genbankHook)
	case boil.AfterInsertHook:
		genbankAfterInsertHooks = append(genbankAfterInsertHooks, genbankHook)
	case boil.AfterSelectHook:
		genbankAfterSelectHooks = append(genbankAfterSelectHooks, genbankHook)
	case boil.AfterUpdateHook:
		genbankAfterUpdateHooks = append(genbankAfterUpdateHooks, genbankHook)
	case boil.AfterDeleteHook:
		genbankAfterDeleteHooks = append(genbankAfterDeleteHooks, genbankHook)
	case boil.AfterUpsertHook:
		genbankAfterUpsertHooks = append(genbankAfterUpsertHooks, genbankHook)
	}
}

// One returns a single genbank record from the query.
func (q genbankQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Genbank, error) {
	o := &Genbank{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for genbank")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Genbank records from the query.
func (q genbankQuery) All(ctx context.Context, exec boil.ContextExecutor) (GenbankSlice, error) {
	var o []*Genbank

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Genbank slice")
	}

	if len(genbankAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Genbank records in the query.
func (q genbankQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count genbank rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q genbankQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if genbank exists")
	}

	return count > 0, nil
}

// Seqhash pointed to by the foreign key.
func (o *Genbank) Seqhash(mods ...qm.QueryMod) seqhashQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"seqhash\" = ?", o.SeqhashID),
	}

	queryMods = append(queryMods, mods...)

	query := Seqhashes(queryMods...)
	queries.SetFrom(query.Query, "\"seqhash\"")

	return query
}

// LoadSeqhash allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (genbankL) LoadSeqhash(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGenbank interface{}, mods queries.Applicator) error {
	var slice []*Genbank
	var object *Genbank

	if singular {
		object = maybeGenbank.(*Genbank)
	} else {
		slice = *maybeGenbank.(*[]*Genbank)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &genbankR{}
		}
		args = append(args, object.SeqhashID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &genbankR{}
			}

			for _, a := range args {
				if a == obj.SeqhashID {
					continue Outer
				}
			}

			args = append(args, obj.SeqhashID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seqhash`),
		qm.WhereIn(`seqhash.seqhash in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Seqhash")
	}

	var resultSlice []*Seqhash
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Seqhash")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seqhash")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seqhash")
	}

	if len(genbankAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Seqhash = foreign
		if foreign.R == nil {
			foreign.R = &seqhashR{}
		}
		foreign.R.Genbanks = append(foreign.R.Genbanks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SeqhashID == foreign.Seqhash {
				local.R.Seqhash = foreign
				if foreign.R == nil {
					foreign.R = &seqhashR{}
				}
				foreign.R.Genbanks = append(foreign.R.Genbanks, local)
				break
			}
		}
	}

	return nil
}

// SetSeqhash of the genbank to the related item.
// Sets o.R.Seqhash to related.
// Adds o to related.R.Genbanks.
func (o *Genbank) SetSeqhash(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Seqhash) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"genbank\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"seqhash_id"}),
		strmangle.WhereClause("\"", "\"", 2, genbankPrimaryKeyColumns),
	)
	values := []interface{}{related.Seqhash, o.Accession}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SeqhashID = related.Seqhash
	if o.R == nil {
		o.R = &genbankR{
			Seqhash: related,
		}
	} else {
		o.R.Seqhash = related
	}

	if related.R == nil {
		related.R = &seqhashR{
			Genbanks: GenbankSlice{o},
		}
	} else {
		related.R.Genbanks = append(related.R.Genbanks, o)
	}

	return nil
}

// Genbanks retrieves all the records using an executor.
func Genbanks(mods ...qm.QueryMod) genbankQuery {
	mods = append(mods, qm.From("\"genbank\""))
	return genbankQuery{NewQuery(mods...)}
}

// FindGenbank retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGenbank(ctx context.Context, exec boil.ContextExecutor, accession string, selectCols ...string) (*Genbank, error) {
	genbankObj := &Genbank{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"genbank\" where \"accession\"=$1", sel,
	)

	q := queries.Raw(query, accession)

	err := q.Bind(ctx, exec, genbankObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from genbank")
	}

	return genbankObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Genbank) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no genbank provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(genbankColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	genbankInsertCacheMut.RLock()
	cache, cached := genbankInsertCache[key]
	genbankInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			genbankAllColumns,
			genbankColumnsWithDefault,
			genbankColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(genbankType, genbankMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(genbankType, genbankMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"genbank\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"genbank\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into genbank")
	}

	if !cached {
		genbankInsertCacheMut.Lock()
		genbankInsertCache[key] = cache
		genbankInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Genbank.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Genbank) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	genbankUpdateCacheMut.RLock()
	cache, cached := genbankUpdateCache[key]
	genbankUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			genbankAllColumns,
			genbankPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update genbank, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"genbank\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, genbankPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(genbankType, genbankMapping, append(wl, genbankPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update genbank row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for genbank")
	}

	if !cached {
		genbankUpdateCacheMut.Lock()
		genbankUpdateCache[key] = cache
		genbankUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q genbankQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for genbank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for genbank")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GenbankSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genbankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"genbank\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, genbankPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in genbank slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all genbank")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Genbank) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no genbank provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(genbankColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	genbankUpsertCacheMut.RLock()
	cache, cached := genbankUpsertCache[key]
	genbankUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			genbankAllColumns,
			genbankColumnsWithDefault,
			genbankColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			genbankAllColumns,
			genbankPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert genbank, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(genbankPrimaryKeyColumns))
			copy(conflict, genbankPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"genbank\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(genbankType, genbankMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(genbankType, genbankMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert genbank")
	}

	if !cached {
		genbankUpsertCacheMut.Lock()
		genbankUpsertCache[key] = cache
		genbankUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Genbank record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Genbank) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Genbank provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), genbankPrimaryKeyMapping)
	sql := "DELETE FROM \"genbank\" WHERE \"accession\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from genbank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for genbank")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q genbankQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no genbankQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from genbank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for genbank")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GenbankSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(genbankBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genbankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"genbank\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, genbankPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from genbank slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for genbank")
	}

	if len(genbankAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Genbank) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGenbank(ctx, exec, o.Accession)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GenbankSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GenbankSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genbankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"genbank\".* FROM \"genbank\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, genbankPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GenbankSlice")
	}

	*o = slice

	return nil
}

// GenbankExists checks if the Genbank row exists.
func GenbankExists(ctx context.Context, exec boil.ContextExecutor, accession string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"genbank\" where \"accession\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, accession)
	}
	row := exec.QueryRowContext(ctx, sql, accession)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if genbank exists")
	}

	return exists, nil
}
