// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSeqhashes(t *testing.T) {
	t.Parallel()

	query := Seqhashes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSeqhashesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Seqhashes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeqhashesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Seqhashes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Seqhashes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeqhashesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SeqhashSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Seqhashes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeqhashesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SeqhashExists(ctx, tx, o.Seqhash)
	if err != nil {
		t.Errorf("Unable to check if Seqhash exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SeqhashExists to return true, but got false.")
	}
}

func testSeqhashesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	seqhashFound, err := FindSeqhash(ctx, tx, o.Seqhash)
	if err != nil {
		t.Error(err)
	}

	if seqhashFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSeqhashesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Seqhashes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSeqhashesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Seqhashes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSeqhashesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	seqhashOne := &Seqhash{}
	seqhashTwo := &Seqhash{}
	if err = randomize.Struct(seed, seqhashOne, seqhashDBTypes, false, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}
	if err = randomize.Struct(seed, seqhashTwo, seqhashDBTypes, false, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = seqhashOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = seqhashTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Seqhashes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSeqhashesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	seqhashOne := &Seqhash{}
	seqhashTwo := &Seqhash{}
	if err = randomize.Struct(seed, seqhashOne, seqhashDBTypes, false, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}
	if err = randomize.Struct(seed, seqhashTwo, seqhashDBTypes, false, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = seqhashOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = seqhashTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Seqhashes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func seqhashBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Seqhash) error {
	*o = Seqhash{}
	return nil
}

func seqhashAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Seqhash) error {
	*o = Seqhash{}
	return nil
}

func seqhashAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Seqhash) error {
	*o = Seqhash{}
	return nil
}

func seqhashBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Seqhash) error {
	*o = Seqhash{}
	return nil
}

func seqhashAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Seqhash) error {
	*o = Seqhash{}
	return nil
}

func seqhashBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Seqhash) error {
	*o = Seqhash{}
	return nil
}

func seqhashAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Seqhash) error {
	*o = Seqhash{}
	return nil
}

func seqhashBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Seqhash) error {
	*o = Seqhash{}
	return nil
}

func seqhashAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Seqhash) error {
	*o = Seqhash{}
	return nil
}

func testSeqhashesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Seqhash{}
	o := &Seqhash{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, seqhashDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Seqhash object: %s", err)
	}

	AddSeqhashHook(boil.BeforeInsertHook, seqhashBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	seqhashBeforeInsertHooks = []SeqhashHook{}

	AddSeqhashHook(boil.AfterInsertHook, seqhashAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	seqhashAfterInsertHooks = []SeqhashHook{}

	AddSeqhashHook(boil.AfterSelectHook, seqhashAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	seqhashAfterSelectHooks = []SeqhashHook{}

	AddSeqhashHook(boil.BeforeUpdateHook, seqhashBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	seqhashBeforeUpdateHooks = []SeqhashHook{}

	AddSeqhashHook(boil.AfterUpdateHook, seqhashAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	seqhashAfterUpdateHooks = []SeqhashHook{}

	AddSeqhashHook(boil.BeforeDeleteHook, seqhashBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	seqhashBeforeDeleteHooks = []SeqhashHook{}

	AddSeqhashHook(boil.AfterDeleteHook, seqhashAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	seqhashAfterDeleteHooks = []SeqhashHook{}

	AddSeqhashHook(boil.BeforeUpsertHook, seqhashBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	seqhashBeforeUpsertHooks = []SeqhashHook{}

	AddSeqhashHook(boil.AfterUpsertHook, seqhashAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	seqhashAfterUpsertHooks = []SeqhashHook{}
}

func testSeqhashesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Seqhashes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSeqhashesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(seqhashColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Seqhashes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSeqhashToManyGenbanks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Seqhash
	var b, c Genbank

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, genbankDBTypes, false, genbankColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, genbankDBTypes, false, genbankColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SeqhashID = a.Seqhash
	c.SeqhashID = a.Seqhash

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Genbanks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SeqhashID == b.SeqhashID {
			bFound = true
		}
		if v.SeqhashID == c.SeqhashID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SeqhashSlice{&a}
	if err = a.L.LoadGenbanks(ctx, tx, false, (*[]*Seqhash)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Genbanks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Genbanks = nil
	if err = a.L.LoadGenbanks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Genbanks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSeqhashToManyChildSeqhashSeqhashlinks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Seqhash
	var b, c Seqhashlink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, seqhashlinkDBTypes, false, seqhashlinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, seqhashlinkDBTypes, false, seqhashlinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ChildSeqhashID = a.Seqhash
	c.ChildSeqhashID = a.Seqhash

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ChildSeqhashSeqhashlinks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ChildSeqhashID == b.ChildSeqhashID {
			bFound = true
		}
		if v.ChildSeqhashID == c.ChildSeqhashID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SeqhashSlice{&a}
	if err = a.L.LoadChildSeqhashSeqhashlinks(ctx, tx, false, (*[]*Seqhash)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChildSeqhashSeqhashlinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ChildSeqhashSeqhashlinks = nil
	if err = a.L.LoadChildSeqhashSeqhashlinks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChildSeqhashSeqhashlinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSeqhashToManyParentSeqhashSeqhashlinks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Seqhash
	var b, c Seqhashlink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, seqhashlinkDBTypes, false, seqhashlinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, seqhashlinkDBTypes, false, seqhashlinkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ParentSeqhashID = a.Seqhash
	c.ParentSeqhashID = a.Seqhash

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ParentSeqhashSeqhashlinks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ParentSeqhashID == b.ParentSeqhashID {
			bFound = true
		}
		if v.ParentSeqhashID == c.ParentSeqhashID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SeqhashSlice{&a}
	if err = a.L.LoadParentSeqhashSeqhashlinks(ctx, tx, false, (*[]*Seqhash)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentSeqhashSeqhashlinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ParentSeqhashSeqhashlinks = nil
	if err = a.L.LoadParentSeqhashSeqhashlinks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentSeqhashSeqhashlinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSeqhashToManyUniprots(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Seqhash
	var b, c Uniprot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, uniprotDBTypes, false, uniprotColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, uniprotDBTypes, false, uniprotColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SeqhashID = a.Seqhash
	c.SeqhashID = a.Seqhash

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Uniprots().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SeqhashID == b.SeqhashID {
			bFound = true
		}
		if v.SeqhashID == c.SeqhashID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SeqhashSlice{&a}
	if err = a.L.LoadUniprots(ctx, tx, false, (*[]*Seqhash)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Uniprots); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Uniprots = nil
	if err = a.L.LoadUniprots(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Uniprots); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSeqhashToManyAddOpGenbanks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Seqhash
	var b, c, d, e Genbank

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seqhashDBTypes, false, strmangle.SetComplement(seqhashPrimaryKeyColumns, seqhashColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Genbank{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, genbankDBTypes, false, strmangle.SetComplement(genbankPrimaryKeyColumns, genbankColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Genbank{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGenbanks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Seqhash != first.SeqhashID {
			t.Error("foreign key was wrong value", a.Seqhash, first.SeqhashID)
		}
		if a.Seqhash != second.SeqhashID {
			t.Error("foreign key was wrong value", a.Seqhash, second.SeqhashID)
		}

		if first.R.Seqhash != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Seqhash != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Genbanks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Genbanks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Genbanks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSeqhashToManyAddOpChildSeqhashSeqhashlinks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Seqhash
	var b, c, d, e Seqhashlink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seqhashDBTypes, false, strmangle.SetComplement(seqhashPrimaryKeyColumns, seqhashColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Seqhashlink{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, seqhashlinkDBTypes, false, strmangle.SetComplement(seqhashlinkPrimaryKeyColumns, seqhashlinkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Seqhashlink{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddChildSeqhashSeqhashlinks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Seqhash != first.ChildSeqhashID {
			t.Error("foreign key was wrong value", a.Seqhash, first.ChildSeqhashID)
		}
		if a.Seqhash != second.ChildSeqhashID {
			t.Error("foreign key was wrong value", a.Seqhash, second.ChildSeqhashID)
		}

		if first.R.ChildSeqhash != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ChildSeqhash != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ChildSeqhashSeqhashlinks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ChildSeqhashSeqhashlinks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ChildSeqhashSeqhashlinks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSeqhashToManyAddOpParentSeqhashSeqhashlinks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Seqhash
	var b, c, d, e Seqhashlink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seqhashDBTypes, false, strmangle.SetComplement(seqhashPrimaryKeyColumns, seqhashColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Seqhashlink{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, seqhashlinkDBTypes, false, strmangle.SetComplement(seqhashlinkPrimaryKeyColumns, seqhashlinkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Seqhashlink{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParentSeqhashSeqhashlinks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Seqhash != first.ParentSeqhashID {
			t.Error("foreign key was wrong value", a.Seqhash, first.ParentSeqhashID)
		}
		if a.Seqhash != second.ParentSeqhashID {
			t.Error("foreign key was wrong value", a.Seqhash, second.ParentSeqhashID)
		}

		if first.R.ParentSeqhash != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ParentSeqhash != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ParentSeqhashSeqhashlinks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ParentSeqhashSeqhashlinks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ParentSeqhashSeqhashlinks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSeqhashToManyAddOpUniprots(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Seqhash
	var b, c, d, e Uniprot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seqhashDBTypes, false, strmangle.SetComplement(seqhashPrimaryKeyColumns, seqhashColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Uniprot{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, uniprotDBTypes, false, strmangle.SetComplement(uniprotPrimaryKeyColumns, uniprotColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Uniprot{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUniprots(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Seqhash != first.SeqhashID {
			t.Error("foreign key was wrong value", a.Seqhash, first.SeqhashID)
		}
		if a.Seqhash != second.SeqhashID {
			t.Error("foreign key was wrong value", a.Seqhash, second.SeqhashID)
		}

		if first.R.Seqhash != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Seqhash != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Uniprots[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Uniprots[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Uniprots().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSeqhashesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSeqhashesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SeqhashSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSeqhashesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Seqhashes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	seqhashDBTypes = map[string]string{`Seqhash`: `text`, `Circular`: `boolean`, `DoubleStranded`: `boolean`, `SequenceType`: `text`, `Sequence`: `text`}
	_              = bytes.MinRead
)

func testSeqhashesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(seqhashPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(seqhashAllColumns) == len(seqhashPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Seqhashes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSeqhashesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(seqhashAllColumns) == len(seqhashPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Seqhash{}
	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Seqhashes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, seqhashDBTypes, true, seqhashPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(seqhashAllColumns, seqhashPrimaryKeyColumns) {
		fields = seqhashAllColumns
	} else {
		fields = strmangle.SetComplement(
			seqhashAllColumns,
			seqhashPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SeqhashSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSeqhashesUpsert(t *testing.T) {
	t.Parallel()

	if len(seqhashAllColumns) == len(seqhashPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Seqhash{}
	if err = randomize.Struct(seed, &o, seqhashDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Seqhash: %s", err)
	}

	count, err := Seqhashes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, seqhashDBTypes, false, seqhashPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Seqhash struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Seqhash: %s", err)
	}

	count, err = Seqhashes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
