// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Seqhash is an object representing the database table.
type Seqhash struct {
	Seqhash        string `boil:"seqhash" json:"seqhash" toml:"seqhash" yaml:"seqhash"`
	Circular       bool   `boil:"circular" json:"circular" toml:"circular" yaml:"circular"`
	DoubleStranded bool   `boil:"doubleStranded" json:"doubleStranded" toml:"doubleStranded" yaml:"doubleStranded"`
	SequenceType   string `boil:"sequenceType" json:"sequenceType" toml:"sequenceType" yaml:"sequenceType"`
	Sequence       string `boil:"sequence" json:"sequence" toml:"sequence" yaml:"sequence"`

	R *seqhashR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L seqhashL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SeqhashColumns = struct {
	Seqhash        string
	Circular       string
	DoubleStranded string
	SequenceType   string
	Sequence       string
}{
	Seqhash:        "seqhash",
	Circular:       "circular",
	DoubleStranded: "doubleStranded",
	SequenceType:   "sequenceType",
	Sequence:       "sequence",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var SeqhashWhere = struct {
	Seqhash        whereHelperstring
	Circular       whereHelperbool
	DoubleStranded whereHelperbool
	SequenceType   whereHelperstring
	Sequence       whereHelperstring
}{
	Seqhash:        whereHelperstring{field: "\"seqhash\".\"seqhash\""},
	Circular:       whereHelperbool{field: "\"seqhash\".\"circular\""},
	DoubleStranded: whereHelperbool{field: "\"seqhash\".\"doubleStranded\""},
	SequenceType:   whereHelperstring{field: "\"seqhash\".\"sequenceType\""},
	Sequence:       whereHelperstring{field: "\"seqhash\".\"sequence\""},
}

// SeqhashRels is where relationship names are stored.
var SeqhashRels = struct {
	Genbanks                  string
	ChildSeqhashSeqhashlinks  string
	ParentSeqhashSeqhashlinks string
	Uniprots                  string
}{
	Genbanks:                  "Genbanks",
	ChildSeqhashSeqhashlinks:  "ChildSeqhashSeqhashlinks",
	ParentSeqhashSeqhashlinks: "ParentSeqhashSeqhashlinks",
	Uniprots:                  "Uniprots",
}

// seqhashR is where relationships are stored.
type seqhashR struct {
	Genbanks                  GenbankSlice     `boil:"Genbanks" json:"Genbanks" toml:"Genbanks" yaml:"Genbanks"`
	ChildSeqhashSeqhashlinks  SeqhashlinkSlice `boil:"ChildSeqhashSeqhashlinks" json:"ChildSeqhashSeqhashlinks" toml:"ChildSeqhashSeqhashlinks" yaml:"ChildSeqhashSeqhashlinks"`
	ParentSeqhashSeqhashlinks SeqhashlinkSlice `boil:"ParentSeqhashSeqhashlinks" json:"ParentSeqhashSeqhashlinks" toml:"ParentSeqhashSeqhashlinks" yaml:"ParentSeqhashSeqhashlinks"`
	Uniprots                  UniprotSlice     `boil:"Uniprots" json:"Uniprots" toml:"Uniprots" yaml:"Uniprots"`
}

// NewStruct creates a new relationship struct
func (*seqhashR) NewStruct() *seqhashR {
	return &seqhashR{}
}

// seqhashL is where Load methods for each relationship are stored.
type seqhashL struct{}

var (
	seqhashAllColumns            = []string{"seqhash", "circular", "doubleStranded", "sequenceType", "sequence"}
	seqhashColumnsWithoutDefault = []string{"seqhash", "circular", "doubleStranded", "sequenceType", "sequence"}
	seqhashColumnsWithDefault    = []string{}
	seqhashPrimaryKeyColumns     = []string{"seqhash"}
)

type (
	// SeqhashSlice is an alias for a slice of pointers to Seqhash.
	// This should generally be used opposed to []Seqhash.
	SeqhashSlice []*Seqhash
	// SeqhashHook is the signature for custom Seqhash hook methods
	SeqhashHook func(context.Context, boil.ContextExecutor, *Seqhash) error

	seqhashQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	seqhashType                 = reflect.TypeOf(&Seqhash{})
	seqhashMapping              = queries.MakeStructMapping(seqhashType)
	seqhashPrimaryKeyMapping, _ = queries.BindMapping(seqhashType, seqhashMapping, seqhashPrimaryKeyColumns)
	seqhashInsertCacheMut       sync.RWMutex
	seqhashInsertCache          = make(map[string]insertCache)
	seqhashUpdateCacheMut       sync.RWMutex
	seqhashUpdateCache          = make(map[string]updateCache)
	seqhashUpsertCacheMut       sync.RWMutex
	seqhashUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var seqhashBeforeInsertHooks []SeqhashHook
var seqhashBeforeUpdateHooks []SeqhashHook
var seqhashBeforeDeleteHooks []SeqhashHook
var seqhashBeforeUpsertHooks []SeqhashHook

var seqhashAfterInsertHooks []SeqhashHook
var seqhashAfterSelectHooks []SeqhashHook
var seqhashAfterUpdateHooks []SeqhashHook
var seqhashAfterDeleteHooks []SeqhashHook
var seqhashAfterUpsertHooks []SeqhashHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Seqhash) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Seqhash) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Seqhash) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Seqhash) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Seqhash) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Seqhash) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Seqhash) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Seqhash) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Seqhash) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSeqhashHook registers your hook function for all future operations.
func AddSeqhashHook(hookPoint boil.HookPoint, seqhashHook SeqhashHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		seqhashBeforeInsertHooks = append(seqhashBeforeInsertHooks, seqhashHook)
	case boil.BeforeUpdateHook:
		seqhashBeforeUpdateHooks = append(seqhashBeforeUpdateHooks, seqhashHook)
	case boil.BeforeDeleteHook:
		seqhashBeforeDeleteHooks = append(seqhashBeforeDeleteHooks, seqhashHook)
	case boil.BeforeUpsertHook:
		seqhashBeforeUpsertHooks = append(seqhashBeforeUpsertHooks, seqhashHook)
	case boil.AfterInsertHook:
		seqhashAfterInsertHooks = append(seqhashAfterInsertHooks, seqhashHook)
	case boil.AfterSelectHook:
		seqhashAfterSelectHooks = append(seqhashAfterSelectHooks, seqhashHook)
	case boil.AfterUpdateHook:
		seqhashAfterUpdateHooks = append(seqhashAfterUpdateHooks, seqhashHook)
	case boil.AfterDeleteHook:
		seqhashAfterDeleteHooks = append(seqhashAfterDeleteHooks, seqhashHook)
	case boil.AfterUpsertHook:
		seqhashAfterUpsertHooks = append(seqhashAfterUpsertHooks, seqhashHook)
	}
}

// One returns a single seqhash record from the query.
func (q seqhashQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Seqhash, error) {
	o := &Seqhash{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for seqhash")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Seqhash records from the query.
func (q seqhashQuery) All(ctx context.Context, exec boil.ContextExecutor) (SeqhashSlice, error) {
	var o []*Seqhash

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Seqhash slice")
	}

	if len(seqhashAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Seqhash records in the query.
func (q seqhashQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count seqhash rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q seqhashQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if seqhash exists")
	}

	return count > 0, nil
}

// Genbanks retrieves all the genbank's Genbanks with an executor.
func (o *Seqhash) Genbanks(mods ...qm.QueryMod) genbankQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"genbank\".\"seqhash_id\"=?", o.Seqhash),
	)

	query := Genbanks(queryMods...)
	queries.SetFrom(query.Query, "\"genbank\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"genbank\".*"})
	}

	return query
}

// ChildSeqhashSeqhashlinks retrieves all the seqhashlink's Seqhashlinks with an executor via child_seqhash_id column.
func (o *Seqhash) ChildSeqhashSeqhashlinks(mods ...qm.QueryMod) seqhashlinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"seqhashlink\".\"child_seqhash_id\"=?", o.Seqhash),
	)

	query := Seqhashlinks(queryMods...)
	queries.SetFrom(query.Query, "\"seqhashlink\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"seqhashlink\".*"})
	}

	return query
}

// ParentSeqhashSeqhashlinks retrieves all the seqhashlink's Seqhashlinks with an executor via parent_seqhash_id column.
func (o *Seqhash) ParentSeqhashSeqhashlinks(mods ...qm.QueryMod) seqhashlinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"seqhashlink\".\"parent_seqhash_id\"=?", o.Seqhash),
	)

	query := Seqhashlinks(queryMods...)
	queries.SetFrom(query.Query, "\"seqhashlink\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"seqhashlink\".*"})
	}

	return query
}

// Uniprots retrieves all the uniprot's Uniprots with an executor.
func (o *Seqhash) Uniprots(mods ...qm.QueryMod) uniprotQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"uniprot\".\"seqhash_id\"=?", o.Seqhash),
	)

	query := Uniprots(queryMods...)
	queries.SetFrom(query.Query, "\"uniprot\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"uniprot\".*"})
	}

	return query
}

// LoadGenbanks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (seqhashL) LoadGenbanks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeqhash interface{}, mods queries.Applicator) error {
	var slice []*Seqhash
	var object *Seqhash

	if singular {
		object = maybeSeqhash.(*Seqhash)
	} else {
		slice = *maybeSeqhash.(*[]*Seqhash)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &seqhashR{}
		}
		args = append(args, object.Seqhash)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seqhashR{}
			}

			for _, a := range args {
				if a == obj.Seqhash {
					continue Outer
				}
			}

			args = append(args, obj.Seqhash)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`genbank`),
		qm.WhereIn(`genbank.seqhash_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load genbank")
	}

	var resultSlice []*Genbank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice genbank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on genbank")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for genbank")
	}

	if len(genbankAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Genbanks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &genbankR{}
			}
			foreign.R.Seqhash = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Seqhash == foreign.SeqhashID {
				local.R.Genbanks = append(local.R.Genbanks, foreign)
				if foreign.R == nil {
					foreign.R = &genbankR{}
				}
				foreign.R.Seqhash = local
				break
			}
		}
	}

	return nil
}

// LoadChildSeqhashSeqhashlinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (seqhashL) LoadChildSeqhashSeqhashlinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeqhash interface{}, mods queries.Applicator) error {
	var slice []*Seqhash
	var object *Seqhash

	if singular {
		object = maybeSeqhash.(*Seqhash)
	} else {
		slice = *maybeSeqhash.(*[]*Seqhash)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &seqhashR{}
		}
		args = append(args, object.Seqhash)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seqhashR{}
			}

			for _, a := range args {
				if a == obj.Seqhash {
					continue Outer
				}
			}

			args = append(args, obj.Seqhash)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seqhashlink`),
		qm.WhereIn(`seqhashlink.child_seqhash_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load seqhashlink")
	}

	var resultSlice []*Seqhashlink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice seqhashlink")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on seqhashlink")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seqhashlink")
	}

	if len(seqhashlinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChildSeqhashSeqhashlinks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &seqhashlinkR{}
			}
			foreign.R.ChildSeqhash = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Seqhash == foreign.ChildSeqhashID {
				local.R.ChildSeqhashSeqhashlinks = append(local.R.ChildSeqhashSeqhashlinks, foreign)
				if foreign.R == nil {
					foreign.R = &seqhashlinkR{}
				}
				foreign.R.ChildSeqhash = local
				break
			}
		}
	}

	return nil
}

// LoadParentSeqhashSeqhashlinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (seqhashL) LoadParentSeqhashSeqhashlinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeqhash interface{}, mods queries.Applicator) error {
	var slice []*Seqhash
	var object *Seqhash

	if singular {
		object = maybeSeqhash.(*Seqhash)
	} else {
		slice = *maybeSeqhash.(*[]*Seqhash)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &seqhashR{}
		}
		args = append(args, object.Seqhash)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seqhashR{}
			}

			for _, a := range args {
				if a == obj.Seqhash {
					continue Outer
				}
			}

			args = append(args, obj.Seqhash)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seqhashlink`),
		qm.WhereIn(`seqhashlink.parent_seqhash_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load seqhashlink")
	}

	var resultSlice []*Seqhashlink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice seqhashlink")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on seqhashlink")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seqhashlink")
	}

	if len(seqhashlinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentSeqhashSeqhashlinks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &seqhashlinkR{}
			}
			foreign.R.ParentSeqhash = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Seqhash == foreign.ParentSeqhashID {
				local.R.ParentSeqhashSeqhashlinks = append(local.R.ParentSeqhashSeqhashlinks, foreign)
				if foreign.R == nil {
					foreign.R = &seqhashlinkR{}
				}
				foreign.R.ParentSeqhash = local
				break
			}
		}
	}

	return nil
}

// LoadUniprots allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (seqhashL) LoadUniprots(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeqhash interface{}, mods queries.Applicator) error {
	var slice []*Seqhash
	var object *Seqhash

	if singular {
		object = maybeSeqhash.(*Seqhash)
	} else {
		slice = *maybeSeqhash.(*[]*Seqhash)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &seqhashR{}
		}
		args = append(args, object.Seqhash)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seqhashR{}
			}

			for _, a := range args {
				if a == obj.Seqhash {
					continue Outer
				}
			}

			args = append(args, obj.Seqhash)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`uniprot`),
		qm.WhereIn(`uniprot.seqhash_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load uniprot")
	}

	var resultSlice []*Uniprot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice uniprot")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on uniprot")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for uniprot")
	}

	if len(uniprotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Uniprots = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &uniprotR{}
			}
			foreign.R.Seqhash = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Seqhash == foreign.SeqhashID {
				local.R.Uniprots = append(local.R.Uniprots, foreign)
				if foreign.R == nil {
					foreign.R = &uniprotR{}
				}
				foreign.R.Seqhash = local
				break
			}
		}
	}

	return nil
}

// AddGenbanks adds the given related objects to the existing relationships
// of the seqhash, optionally inserting them as new records.
// Appends related to o.R.Genbanks.
// Sets related.R.Seqhash appropriately.
func (o *Seqhash) AddGenbanks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Genbank) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SeqhashID = o.Seqhash
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"genbank\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seqhash_id"}),
				strmangle.WhereClause("\"", "\"", 2, genbankPrimaryKeyColumns),
			)
			values := []interface{}{o.Seqhash, rel.Accession}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SeqhashID = o.Seqhash
		}
	}

	if o.R == nil {
		o.R = &seqhashR{
			Genbanks: related,
		}
	} else {
		o.R.Genbanks = append(o.R.Genbanks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &genbankR{
				Seqhash: o,
			}
		} else {
			rel.R.Seqhash = o
		}
	}
	return nil
}

// AddChildSeqhashSeqhashlinks adds the given related objects to the existing relationships
// of the seqhash, optionally inserting them as new records.
// Appends related to o.R.ChildSeqhashSeqhashlinks.
// Sets related.R.ChildSeqhash appropriately.
func (o *Seqhash) AddChildSeqhashSeqhashlinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Seqhashlink) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChildSeqhashID = o.Seqhash
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"seqhashlink\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"child_seqhash_id"}),
				strmangle.WhereClause("\"", "\"", 2, seqhashlinkPrimaryKeyColumns),
			)
			values := []interface{}{o.Seqhash, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChildSeqhashID = o.Seqhash
		}
	}

	if o.R == nil {
		o.R = &seqhashR{
			ChildSeqhashSeqhashlinks: related,
		}
	} else {
		o.R.ChildSeqhashSeqhashlinks = append(o.R.ChildSeqhashSeqhashlinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &seqhashlinkR{
				ChildSeqhash: o,
			}
		} else {
			rel.R.ChildSeqhash = o
		}
	}
	return nil
}

// AddParentSeqhashSeqhashlinks adds the given related objects to the existing relationships
// of the seqhash, optionally inserting them as new records.
// Appends related to o.R.ParentSeqhashSeqhashlinks.
// Sets related.R.ParentSeqhash appropriately.
func (o *Seqhash) AddParentSeqhashSeqhashlinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Seqhashlink) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ParentSeqhashID = o.Seqhash
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"seqhashlink\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_seqhash_id"}),
				strmangle.WhereClause("\"", "\"", 2, seqhashlinkPrimaryKeyColumns),
			)
			values := []interface{}{o.Seqhash, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ParentSeqhashID = o.Seqhash
		}
	}

	if o.R == nil {
		o.R = &seqhashR{
			ParentSeqhashSeqhashlinks: related,
		}
	} else {
		o.R.ParentSeqhashSeqhashlinks = append(o.R.ParentSeqhashSeqhashlinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &seqhashlinkR{
				ParentSeqhash: o,
			}
		} else {
			rel.R.ParentSeqhash = o
		}
	}
	return nil
}

// AddUniprots adds the given related objects to the existing relationships
// of the seqhash, optionally inserting them as new records.
// Appends related to o.R.Uniprots.
// Sets related.R.Seqhash appropriately.
func (o *Seqhash) AddUniprots(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Uniprot) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SeqhashID = o.Seqhash
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"uniprot\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seqhash_id"}),
				strmangle.WhereClause("\"", "\"", 2, uniprotPrimaryKeyColumns),
			)
			values := []interface{}{o.Seqhash, rel.Accession}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SeqhashID = o.Seqhash
		}
	}

	if o.R == nil {
		o.R = &seqhashR{
			Uniprots: related,
		}
	} else {
		o.R.Uniprots = append(o.R.Uniprots, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &uniprotR{
				Seqhash: o,
			}
		} else {
			rel.R.Seqhash = o
		}
	}
	return nil
}

// Seqhashes retrieves all the records using an executor.
func Seqhashes(mods ...qm.QueryMod) seqhashQuery {
	mods = append(mods, qm.From("\"seqhash\""))
	return seqhashQuery{NewQuery(mods...)}
}

// FindSeqhash retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSeqhash(ctx context.Context, exec boil.ContextExecutor, seqhash string, selectCols ...string) (*Seqhash, error) {
	seqhashObj := &Seqhash{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"seqhash\" where \"seqhash\"=$1", sel,
	)

	q := queries.Raw(query, seqhash)

	err := q.Bind(ctx, exec, seqhashObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from seqhash")
	}

	return seqhashObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Seqhash) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seqhash provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seqhashColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	seqhashInsertCacheMut.RLock()
	cache, cached := seqhashInsertCache[key]
	seqhashInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			seqhashAllColumns,
			seqhashColumnsWithDefault,
			seqhashColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(seqhashType, seqhashMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(seqhashType, seqhashMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"seqhash\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"seqhash\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into seqhash")
	}

	if !cached {
		seqhashInsertCacheMut.Lock()
		seqhashInsertCache[key] = cache
		seqhashInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Seqhash.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Seqhash) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	seqhashUpdateCacheMut.RLock()
	cache, cached := seqhashUpdateCache[key]
	seqhashUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			seqhashAllColumns,
			seqhashPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update seqhash, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"seqhash\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, seqhashPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(seqhashType, seqhashMapping, append(wl, seqhashPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update seqhash row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for seqhash")
	}

	if !cached {
		seqhashUpdateCacheMut.Lock()
		seqhashUpdateCache[key] = cache
		seqhashUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q seqhashQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for seqhash")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for seqhash")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SeqhashSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seqhashPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"seqhash\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, seqhashPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in seqhash slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all seqhash")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Seqhash) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seqhash provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seqhashColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	seqhashUpsertCacheMut.RLock()
	cache, cached := seqhashUpsertCache[key]
	seqhashUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			seqhashAllColumns,
			seqhashColumnsWithDefault,
			seqhashColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			seqhashAllColumns,
			seqhashPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert seqhash, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(seqhashPrimaryKeyColumns))
			copy(conflict, seqhashPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"seqhash\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(seqhashType, seqhashMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(seqhashType, seqhashMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert seqhash")
	}

	if !cached {
		seqhashUpsertCacheMut.Lock()
		seqhashUpsertCache[key] = cache
		seqhashUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Seqhash record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Seqhash) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Seqhash provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seqhashPrimaryKeyMapping)
	sql := "DELETE FROM \"seqhash\" WHERE \"seqhash\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from seqhash")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for seqhash")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q seqhashQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no seqhashQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seqhash")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seqhash")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SeqhashSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(seqhashBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seqhashPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"seqhash\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seqhashPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seqhash slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seqhash")
	}

	if len(seqhashAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Seqhash) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSeqhash(ctx, exec, o.Seqhash)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeqhashSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SeqhashSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seqhashPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"seqhash\".* FROM \"seqhash\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seqhashPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SeqhashSlice")
	}

	*o = slice

	return nil
}

// SeqhashExists checks if the Seqhash row exists.
func SeqhashExists(ctx context.Context, exec boil.ContextExecutor, seqhash string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"seqhash\" where \"seqhash\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, seqhash)
	}
	row := exec.QueryRowContext(ctx, sql, seqhash)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if seqhash exists")
	}

	return exists, nil
}
