// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Seqhashlink is an object representing the database table.
type Seqhashlink struct {
	ID              int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ChildSeqhashID  string `boil:"child_seqhash_id" json:"child_seqhash_id" toml:"child_seqhash_id" yaml:"child_seqhash_id"`
	ParentSeqhashID string `boil:"parent_seqhash_id" json:"parent_seqhash_id" toml:"parent_seqhash_id" yaml:"parent_seqhash_id"`

	R *seqhashlinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L seqhashlinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SeqhashlinkColumns = struct {
	ID              string
	ChildSeqhashID  string
	ParentSeqhashID string
}{
	ID:              "id",
	ChildSeqhashID:  "child_seqhash_id",
	ParentSeqhashID: "parent_seqhash_id",
}

// Generated where

var SeqhashlinkWhere = struct {
	ID              whereHelperint
	ChildSeqhashID  whereHelperstring
	ParentSeqhashID whereHelperstring
}{
	ID:              whereHelperint{field: "\"seqhashlink\".\"id\""},
	ChildSeqhashID:  whereHelperstring{field: "\"seqhashlink\".\"child_seqhash_id\""},
	ParentSeqhashID: whereHelperstring{field: "\"seqhashlink\".\"parent_seqhash_id\""},
}

// SeqhashlinkRels is where relationship names are stored.
var SeqhashlinkRels = struct {
	ChildSeqhash  string
	ParentSeqhash string
}{
	ChildSeqhash:  "ChildSeqhash",
	ParentSeqhash: "ParentSeqhash",
}

// seqhashlinkR is where relationships are stored.
type seqhashlinkR struct {
	ChildSeqhash  *Seqhash `boil:"ChildSeqhash" json:"ChildSeqhash" toml:"ChildSeqhash" yaml:"ChildSeqhash"`
	ParentSeqhash *Seqhash `boil:"ParentSeqhash" json:"ParentSeqhash" toml:"ParentSeqhash" yaml:"ParentSeqhash"`
}

// NewStruct creates a new relationship struct
func (*seqhashlinkR) NewStruct() *seqhashlinkR {
	return &seqhashlinkR{}
}

// seqhashlinkL is where Load methods for each relationship are stored.
type seqhashlinkL struct{}

var (
	seqhashlinkAllColumns            = []string{"id", "child_seqhash_id", "parent_seqhash_id"}
	seqhashlinkColumnsWithoutDefault = []string{"child_seqhash_id", "parent_seqhash_id"}
	seqhashlinkColumnsWithDefault    = []string{"id"}
	seqhashlinkPrimaryKeyColumns     = []string{"id"}
)

type (
	// SeqhashlinkSlice is an alias for a slice of pointers to Seqhashlink.
	// This should generally be used opposed to []Seqhashlink.
	SeqhashlinkSlice []*Seqhashlink
	// SeqhashlinkHook is the signature for custom Seqhashlink hook methods
	SeqhashlinkHook func(context.Context, boil.ContextExecutor, *Seqhashlink) error

	seqhashlinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	seqhashlinkType                 = reflect.TypeOf(&Seqhashlink{})
	seqhashlinkMapping              = queries.MakeStructMapping(seqhashlinkType)
	seqhashlinkPrimaryKeyMapping, _ = queries.BindMapping(seqhashlinkType, seqhashlinkMapping, seqhashlinkPrimaryKeyColumns)
	seqhashlinkInsertCacheMut       sync.RWMutex
	seqhashlinkInsertCache          = make(map[string]insertCache)
	seqhashlinkUpdateCacheMut       sync.RWMutex
	seqhashlinkUpdateCache          = make(map[string]updateCache)
	seqhashlinkUpsertCacheMut       sync.RWMutex
	seqhashlinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var seqhashlinkBeforeInsertHooks []SeqhashlinkHook
var seqhashlinkBeforeUpdateHooks []SeqhashlinkHook
var seqhashlinkBeforeDeleteHooks []SeqhashlinkHook
var seqhashlinkBeforeUpsertHooks []SeqhashlinkHook

var seqhashlinkAfterInsertHooks []SeqhashlinkHook
var seqhashlinkAfterSelectHooks []SeqhashlinkHook
var seqhashlinkAfterUpdateHooks []SeqhashlinkHook
var seqhashlinkAfterDeleteHooks []SeqhashlinkHook
var seqhashlinkAfterUpsertHooks []SeqhashlinkHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Seqhashlink) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashlinkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Seqhashlink) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashlinkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Seqhashlink) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashlinkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Seqhashlink) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashlinkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Seqhashlink) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashlinkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Seqhashlink) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashlinkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Seqhashlink) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashlinkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Seqhashlink) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashlinkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Seqhashlink) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seqhashlinkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSeqhashlinkHook registers your hook function for all future operations.
func AddSeqhashlinkHook(hookPoint boil.HookPoint, seqhashlinkHook SeqhashlinkHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		seqhashlinkBeforeInsertHooks = append(seqhashlinkBeforeInsertHooks, seqhashlinkHook)
	case boil.BeforeUpdateHook:
		seqhashlinkBeforeUpdateHooks = append(seqhashlinkBeforeUpdateHooks, seqhashlinkHook)
	case boil.BeforeDeleteHook:
		seqhashlinkBeforeDeleteHooks = append(seqhashlinkBeforeDeleteHooks, seqhashlinkHook)
	case boil.BeforeUpsertHook:
		seqhashlinkBeforeUpsertHooks = append(seqhashlinkBeforeUpsertHooks, seqhashlinkHook)
	case boil.AfterInsertHook:
		seqhashlinkAfterInsertHooks = append(seqhashlinkAfterInsertHooks, seqhashlinkHook)
	case boil.AfterSelectHook:
		seqhashlinkAfterSelectHooks = append(seqhashlinkAfterSelectHooks, seqhashlinkHook)
	case boil.AfterUpdateHook:
		seqhashlinkAfterUpdateHooks = append(seqhashlinkAfterUpdateHooks, seqhashlinkHook)
	case boil.AfterDeleteHook:
		seqhashlinkAfterDeleteHooks = append(seqhashlinkAfterDeleteHooks, seqhashlinkHook)
	case boil.AfterUpsertHook:
		seqhashlinkAfterUpsertHooks = append(seqhashlinkAfterUpsertHooks, seqhashlinkHook)
	}
}

// One returns a single seqhashlink record from the query.
func (q seqhashlinkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Seqhashlink, error) {
	o := &Seqhashlink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for seqhashlink")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Seqhashlink records from the query.
func (q seqhashlinkQuery) All(ctx context.Context, exec boil.ContextExecutor) (SeqhashlinkSlice, error) {
	var o []*Seqhashlink

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Seqhashlink slice")
	}

	if len(seqhashlinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Seqhashlink records in the query.
func (q seqhashlinkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count seqhashlink rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q seqhashlinkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if seqhashlink exists")
	}

	return count > 0, nil
}

// ChildSeqhash pointed to by the foreign key.
func (o *Seqhashlink) ChildSeqhash(mods ...qm.QueryMod) seqhashQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"seqhash\" = ?", o.ChildSeqhashID),
	}

	queryMods = append(queryMods, mods...)

	query := Seqhashes(queryMods...)
	queries.SetFrom(query.Query, "\"seqhash\"")

	return query
}

// ParentSeqhash pointed to by the foreign key.
func (o *Seqhashlink) ParentSeqhash(mods ...qm.QueryMod) seqhashQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"seqhash\" = ?", o.ParentSeqhashID),
	}

	queryMods = append(queryMods, mods...)

	query := Seqhashes(queryMods...)
	queries.SetFrom(query.Query, "\"seqhash\"")

	return query
}

// LoadChildSeqhash allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seqhashlinkL) LoadChildSeqhash(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeqhashlink interface{}, mods queries.Applicator) error {
	var slice []*Seqhashlink
	var object *Seqhashlink

	if singular {
		object = maybeSeqhashlink.(*Seqhashlink)
	} else {
		slice = *maybeSeqhashlink.(*[]*Seqhashlink)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &seqhashlinkR{}
		}
		args = append(args, object.ChildSeqhashID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seqhashlinkR{}
			}

			for _, a := range args {
				if a == obj.ChildSeqhashID {
					continue Outer
				}
			}

			args = append(args, obj.ChildSeqhashID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seqhash`),
		qm.WhereIn(`seqhash.seqhash in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Seqhash")
	}

	var resultSlice []*Seqhash
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Seqhash")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seqhash")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seqhash")
	}

	if len(seqhashlinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChildSeqhash = foreign
		if foreign.R == nil {
			foreign.R = &seqhashR{}
		}
		foreign.R.ChildSeqhashSeqhashlinks = append(foreign.R.ChildSeqhashSeqhashlinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChildSeqhashID == foreign.Seqhash {
				local.R.ChildSeqhash = foreign
				if foreign.R == nil {
					foreign.R = &seqhashR{}
				}
				foreign.R.ChildSeqhashSeqhashlinks = append(foreign.R.ChildSeqhashSeqhashlinks, local)
				break
			}
		}
	}

	return nil
}

// LoadParentSeqhash allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seqhashlinkL) LoadParentSeqhash(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeqhashlink interface{}, mods queries.Applicator) error {
	var slice []*Seqhashlink
	var object *Seqhashlink

	if singular {
		object = maybeSeqhashlink.(*Seqhashlink)
	} else {
		slice = *maybeSeqhashlink.(*[]*Seqhashlink)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &seqhashlinkR{}
		}
		args = append(args, object.ParentSeqhashID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seqhashlinkR{}
			}

			for _, a := range args {
				if a == obj.ParentSeqhashID {
					continue Outer
				}
			}

			args = append(args, obj.ParentSeqhashID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seqhash`),
		qm.WhereIn(`seqhash.seqhash in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Seqhash")
	}

	var resultSlice []*Seqhash
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Seqhash")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seqhash")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seqhash")
	}

	if len(seqhashlinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentSeqhash = foreign
		if foreign.R == nil {
			foreign.R = &seqhashR{}
		}
		foreign.R.ParentSeqhashSeqhashlinks = append(foreign.R.ParentSeqhashSeqhashlinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ParentSeqhashID == foreign.Seqhash {
				local.R.ParentSeqhash = foreign
				if foreign.R == nil {
					foreign.R = &seqhashR{}
				}
				foreign.R.ParentSeqhashSeqhashlinks = append(foreign.R.ParentSeqhashSeqhashlinks, local)
				break
			}
		}
	}

	return nil
}

// SetChildSeqhash of the seqhashlink to the related item.
// Sets o.R.ChildSeqhash to related.
// Adds o to related.R.ChildSeqhashSeqhashlinks.
func (o *Seqhashlink) SetChildSeqhash(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Seqhash) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"seqhashlink\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"child_seqhash_id"}),
		strmangle.WhereClause("\"", "\"", 2, seqhashlinkPrimaryKeyColumns),
	)
	values := []interface{}{related.Seqhash, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChildSeqhashID = related.Seqhash
	if o.R == nil {
		o.R = &seqhashlinkR{
			ChildSeqhash: related,
		}
	} else {
		o.R.ChildSeqhash = related
	}

	if related.R == nil {
		related.R = &seqhashR{
			ChildSeqhashSeqhashlinks: SeqhashlinkSlice{o},
		}
	} else {
		related.R.ChildSeqhashSeqhashlinks = append(related.R.ChildSeqhashSeqhashlinks, o)
	}

	return nil
}

// SetParentSeqhash of the seqhashlink to the related item.
// Sets o.R.ParentSeqhash to related.
// Adds o to related.R.ParentSeqhashSeqhashlinks.
func (o *Seqhashlink) SetParentSeqhash(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Seqhash) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"seqhashlink\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_seqhash_id"}),
		strmangle.WhereClause("\"", "\"", 2, seqhashlinkPrimaryKeyColumns),
	)
	values := []interface{}{related.Seqhash, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ParentSeqhashID = related.Seqhash
	if o.R == nil {
		o.R = &seqhashlinkR{
			ParentSeqhash: related,
		}
	} else {
		o.R.ParentSeqhash = related
	}

	if related.R == nil {
		related.R = &seqhashR{
			ParentSeqhashSeqhashlinks: SeqhashlinkSlice{o},
		}
	} else {
		related.R.ParentSeqhashSeqhashlinks = append(related.R.ParentSeqhashSeqhashlinks, o)
	}

	return nil
}

// Seqhashlinks retrieves all the records using an executor.
func Seqhashlinks(mods ...qm.QueryMod) seqhashlinkQuery {
	mods = append(mods, qm.From("\"seqhashlink\""))
	return seqhashlinkQuery{NewQuery(mods...)}
}

// FindSeqhashlink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSeqhashlink(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Seqhashlink, error) {
	seqhashlinkObj := &Seqhashlink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"seqhashlink\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, seqhashlinkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from seqhashlink")
	}

	return seqhashlinkObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Seqhashlink) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seqhashlink provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seqhashlinkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	seqhashlinkInsertCacheMut.RLock()
	cache, cached := seqhashlinkInsertCache[key]
	seqhashlinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			seqhashlinkAllColumns,
			seqhashlinkColumnsWithDefault,
			seqhashlinkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(seqhashlinkType, seqhashlinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(seqhashlinkType, seqhashlinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"seqhashlink\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"seqhashlink\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into seqhashlink")
	}

	if !cached {
		seqhashlinkInsertCacheMut.Lock()
		seqhashlinkInsertCache[key] = cache
		seqhashlinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Seqhashlink.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Seqhashlink) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	seqhashlinkUpdateCacheMut.RLock()
	cache, cached := seqhashlinkUpdateCache[key]
	seqhashlinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			seqhashlinkAllColumns,
			seqhashlinkPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update seqhashlink, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"seqhashlink\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, seqhashlinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(seqhashlinkType, seqhashlinkMapping, append(wl, seqhashlinkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update seqhashlink row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for seqhashlink")
	}

	if !cached {
		seqhashlinkUpdateCacheMut.Lock()
		seqhashlinkUpdateCache[key] = cache
		seqhashlinkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q seqhashlinkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for seqhashlink")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for seqhashlink")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SeqhashlinkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seqhashlinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"seqhashlink\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, seqhashlinkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in seqhashlink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all seqhashlink")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Seqhashlink) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seqhashlink provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seqhashlinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	seqhashlinkUpsertCacheMut.RLock()
	cache, cached := seqhashlinkUpsertCache[key]
	seqhashlinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			seqhashlinkAllColumns,
			seqhashlinkColumnsWithDefault,
			seqhashlinkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			seqhashlinkAllColumns,
			seqhashlinkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert seqhashlink, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(seqhashlinkPrimaryKeyColumns))
			copy(conflict, seqhashlinkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"seqhashlink\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(seqhashlinkType, seqhashlinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(seqhashlinkType, seqhashlinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert seqhashlink")
	}

	if !cached {
		seqhashlinkUpsertCacheMut.Lock()
		seqhashlinkUpsertCache[key] = cache
		seqhashlinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Seqhashlink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Seqhashlink) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Seqhashlink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seqhashlinkPrimaryKeyMapping)
	sql := "DELETE FROM \"seqhashlink\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from seqhashlink")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for seqhashlink")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q seqhashlinkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no seqhashlinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seqhashlink")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seqhashlink")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SeqhashlinkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(seqhashlinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seqhashlinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"seqhashlink\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seqhashlinkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seqhashlink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seqhashlink")
	}

	if len(seqhashlinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Seqhashlink) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSeqhashlink(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeqhashlinkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SeqhashlinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seqhashlinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"seqhashlink\".* FROM \"seqhashlink\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seqhashlinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SeqhashlinkSlice")
	}

	*o = slice

	return nil
}

// SeqhashlinkExists checks if the Seqhashlink row exists.
func SeqhashlinkExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"seqhashlink\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if seqhashlink exists")
	}

	return exists, nil
}
